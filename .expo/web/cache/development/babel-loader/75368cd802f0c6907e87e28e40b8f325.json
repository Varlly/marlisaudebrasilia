{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport { ThemeProvider } from 'styled-components';\nimport { Roboto_300Light, Roboto_400Regular, Roboto_500Medium, Roboto_700Bold, Roboto_900Black } from '@expo-google-fonts/roboto';\nimport { Dashboard } from \"./src/screens/Dashboard\";\nimport theme from \"./src/global/styles/theme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      appIsReady = _useState2[0],\n      setAppIsReady = _useState2[1];\n\n  useEffect(function () {\n    function prepare() {\n      return _regeneratorRuntime.async(function prepare$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(SplashScreen.preventAutoHideAsync());\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                Roboto_300Light: Roboto_300Light,\n                Roboto_400Regular: Roboto_400Regular,\n                Roboto_500Medium: Roboto_500Medium,\n                Roboto_700Bold: Roboto_700Bold,\n                Roboto_900Black: Roboto_900Black\n              }));\n\n            case 5:\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return setTimeout(resolve, 2000);\n              }));\n\n            case 7:\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 12:\n              _context.prev = 12;\n              setAppIsReady(true);\n              _context.next = 16;\n              return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n            case 16:\n              return _context.finish(12);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9, 12, 17]], Promise);\n    }\n\n    prepare();\n  }, []);\n  var onLayoutRootView = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!appIsReady) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(SplashScreen.hideAsync());\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, [appIsReady]);\n\n  if (!appIsReady) {\n    return null;\n  }\n\n  return _jsx(ThemeProvider, {\n    theme: theme,\n    children: _jsxs(View, {\n      onLayout: onLayoutRootView,\n      children: [_jsx(StatusBar, {\n        style: \"light\"\n      }), _jsx(Dashboard, {})]\n    })\n  });\n}","map":{"version":3,"names":["StatusBar","React","useEffect","useState","useCallback","SplashScreen","Font","ThemeProvider","Roboto_300Light","Roboto_400Regular","Roboto_500Medium","Roboto_700Bold","Roboto_900Black","Dashboard","theme","App","appIsReady","setAppIsReady","prepare","preventAutoHideAsync","loadAsync","Promise","resolve","setTimeout","console","warn","hideAsync","onLayoutRootView"],"sources":["C:/Users/Alex/projetos/marlisaudebrasilia/App.tsx"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {\n    useEffect,\n    useState,\n    useCallback\n} from 'react';\nimport { View } from 'react-native';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as  Font from 'expo-font'\nimport { ThemeProvider } from 'styled-components';\nimport {\n    Roboto_300Light,\n    Roboto_400Regular,\n    Roboto_500Medium,\n    Roboto_700Bold,\n    Roboto_900Black\n} from '@expo-google-fonts/roboto';\n\nimport { Dashboard } from './src/screens/Dashboard';\nimport theme from './src/global/styles/theme';\n\nexport default function App() {\n    const [appIsReady, setAppIsReady] = useState(false);\n\n    useEffect(() => {\n        async function prepare() {\n            try {\n                // Keep the splash screen visible while we fetch resources\n                await SplashScreen.preventAutoHideAsync();\n                // Pre-load fonts, make any API calls you need to do here\n                await Font.loadAsync({\n                    Roboto_300Light,\n                    Roboto_400Regular,\n                    Roboto_500Medium,\n                    Roboto_700Bold,\n                    Roboto_900Black\n                });\n                // Artificially delay for two seconds to simulate a slow loading\n                // experience. Please remove this if you copy and paste the code!\n                await new Promise(resolve => setTimeout(resolve, 2000));\n            } catch (e) {\n                console.warn(e);\n            } finally {\n                // Tell the application to render\n                setAppIsReady(true);\n                await SplashScreen.hideAsync();\n            }\n        }\n\n        prepare();\n    }, []);\n\n    const onLayoutRootView = useCallback(async () => {\n        if (appIsReady) {\n            await SplashScreen.hideAsync();\n        }\n    }, [appIsReady]);\n\n    if (!appIsReady) {\n        return null;\n    }\n\n    return (\n\n\n        <ThemeProvider theme={theme}>\n            <View onLayout={onLayoutRootView}>\n                <StatusBar style=\"light\" />\n                <Dashboard />\n            </View>\n        </ThemeProvider>\n\n    );\n}\n\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IACIC,SADJ,EAEIC,QAFJ,EAGIC,WAHJ,QAIO,OAJP;;AAMA,OAAO,KAAKC,YAAZ,MAA8B,oBAA9B;AACA,OAAO,KAAMC,IAAb,MAAuB,WAAvB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SACIC,eADJ,EAEIC,iBAFJ,EAGIC,gBAHJ,EAIIC,cAJJ,EAKIC,eALJ,QAMO,2BANP;AAQA,SAASC,SAAT;AACA,OAAOC,KAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC1B,gBAAoCZ,QAAQ,CAAC,KAAD,CAA5C;EAAA;EAAA,IAAOa,UAAP;EAAA,IAAmBC,aAAnB;;EAEAf,SAAS,CAAC,YAAM;IACZ,SAAegB,OAAf;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA,iCAGcb,YAAY,CAACc,oBAAb,EAHd;;YAAA;cAAA;cAAA,iCAKcb,IAAI,CAACc,SAAL,CAAe;gBACjBZ,eAAe,EAAfA,eADiB;gBAEjBC,iBAAiB,EAAjBA,iBAFiB;gBAGjBC,gBAAgB,EAAhBA,gBAHiB;gBAIjBC,cAAc,EAAdA,cAJiB;gBAKjBC,eAAe,EAAfA;cALiB,CAAf,CALd;;YAAA;cAAA;cAAA,iCAcc,IAAIS,OAAJ,CAAY,UAAAC,OAAO;gBAAA,OAAIC,UAAU,CAACD,OAAD,EAAU,IAAV,CAAd;cAAA,CAAnB,CAdd;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAgBQE,OAAO,CAACC,IAAR;;YAhBR;cAAA;cAmBQR,aAAa,CAAC,IAAD,CAAb;cAnBR;cAAA,iCAoBcZ,YAAY,CAACqB,SAAb,EApBd;;YAAA;cAAA;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAwBAR,OAAO;EACV,CA1BQ,EA0BN,EA1BM,CAAT;EA4BA,IAAMS,gBAAgB,GAAGvB,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YAAA,KAC7BY,UAD6B;cAAA;cAAA;YAAA;;YAAA;YAAA,iCAEvBX,YAAY,CAACqB,SAAb,EAFuB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EAIjC,CAACV,UAAD,CAJiC,CAApC;;EAMA,IAAI,CAACA,UAAL,EAAiB;IACb,OAAO,IAAP;EACH;;EAED,OAGI,KAAC,aAAD;IAAe,KAAK,EAAEF,KAAtB;IAAA,UACI,MAAC,IAAD;MAAM,QAAQ,EAAEa,gBAAhB;MAAA,WACI,KAAC,SAAD;QAAW,KAAK,EAAC;MAAjB,EADJ,EAEI,KAAC,SAAD,KAFJ;IAAA;EADJ,EAHJ;AAWH"},"metadata":{},"sourceType":"module"}